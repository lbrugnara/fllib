env win-cmd { }

env linux-bash { }

toolchain clang {

    compiler: "clang",

    for win-cmd {
        archiver: "llvm-lib.exe",
        linker: "link.exe"
    },

    for linux-bash {
        archiver: "ar",
        linker: "lld-link"
    }
}

action clean {
    for win-cmd {
        `if exist .\obj (rd /s /q .\obj)`,
        `if exist .\build (rd /s /q .\build)`
    },
    for linux-bash {
        `/bin/rm -fr obj/ build/`
    }
}

action clean-tests {
    for win-cmd {
        `if exist .\tests\obj (rd /s /q .\tests\obj)`,
        `if exist .\tests\build (rd /s /q .\tests\build)`
    },
    for linux-bash {
        `/bin/rm -fr tests/obj/ tests/build/`
    }
}

config clang-config {
    compile: {
        extension: ".o",
        include_dir_flag: "-I",
        flags: [
            "-std=gnu99",
            "-Wall",
            "-Werror",
            "-Wextra",
            "-pedantic",
            "-Wmissing-field-initializers",
            "-Wno-unused-value",
            "-Wno-unused-parameter",
            "-Wno-unused-variable",
            "-Wno-unused-function",
            "-Wno-missing-braces",
            "-fstrict-aliasing",
            "-Wvla",
            "-finput-charset=UTF-8",
            "-fexec-charset=UTF-8",
            "-D_FORTIFY_SOURCE=2",
            "-DFL_UNICODE_DB",
            "-c ${source}",
            "-o ${output}"
        ]
    },    

    for linux-cmd {
        compile: {
            flags: [
                "-fPIC"
            ]
        },
        archive: {
            extension: ".a",
            flags: [
                "rcs"
            ]
        },
        shared: {
            extension: ".so",
            flags: [
                "-shared",
                "-o ${output}"
            ]
        },
        executable: {
            extension: "",
            flags: [
                "-o ${output}"
            ]
        }
    },

    for win-cmd {
        compile: {
            flags: [
            ]
        },
        archive: {
            extension: ".lib",
            flags: [
                "/NOLOGO",
                "/OUT:${output}"
            ]
        },
        shared: {
            extension: ".dll",
            flags: [
                "/NOLOGO",
                "/DLL",
                "/OUT:${output}"
            ]
        },
        executable: {
            extension: ".exe",
            flags: [
                "/OUT:${output}",
                "/DEFAULTLIB:libcmt.lib",
                "/NOLOGO",
                "/SUBSYSTEM:CONSOLE"
            ]
        }
    }
}

config clang-debug extends clang-config {
    compile: {
        flags: [
            "-ggdb",
            "-DFL_DEBUG"
        ]
    }
}

compile fl-objects {
    includes: [ ],
    output_dir: "obj/",
    sources: [ 
        "src/threading/Thread.c",
        "src/Std.c",
        "src/Slice.c",
        "src/Error.c",
        "src/Mem.c",
        "src/text/resources/UnicodeData.c",
        "src/text/Unicode.c",
        "src/text/String.c",
        "src/Cstring.c",
        "src/Array.c",
        "src/IO.c",
        "src/containers/Container.c",
        "src/containers/Iterator.c",
        "src/containers/Vector.c",
        "src/containers/List.c",
        "src/containers/Hashtable.c",
        "src/text/Regex.c",
        "src/os/System.c",
        "src/os/Process.c",
        "src/os/Timer.c",
        "src/os/Signal.c",
    ],

    for win-cmd {
        sources: [
            "src/os/WinEx.c"
        ]
    }
}

archive fllib-static {
    output_name: "libfl",
    output_dir: "build/",
    actions: {
        before: [],
        after: []
    },
    objects: [
        fl-objects
    ]
}

compile fl-tests-objects {
    includes: [ 
        "./include"
    ],
    output_dir: "tests/obj",
    sources: [
        "tests/Main.c",
        "tests/Test.c",
        "tests/Std.c",
        "tests/Test_Array.c",
        "tests/Test_Defer.c",
        "tests/Test_Slice.c",
        "tests/IO.c",
        "tests/Test_Cstring.c",
        "tests/text/Test_Unicode.c",
        "tests/text/Test_String.c",
        "tests/text/Test_Regex.c",
        "tests/containers/Test_Hashtable.c",
        "tests/containers/Test_Vector.c",
        "tests/containers/Test_List.c"
    ]
}

executable fl-tests {
    output_name: "tests",
    output_dir: "tests/build",
    actions: {
        before: [],
        after: []
    },
    objects: [
        fl-tests-objects,
        fllib-static
    ]
}