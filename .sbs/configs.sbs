
config clang-config for toolchain(clang, gcc) {
    compile: {
        extension: ".o",
        flags: [
            "-std=c99",
            "-Wall",
            "-Werror",
            "-Wextra",
            "-pedantic",
            "-Wmissing-field-initializers",
            "-Wno-unused-value",
            "-Wno-unused-parameter",
            "-Wno-unused-variable",
            "-Wno-unused-function",
            "-Wno-missing-braces",
            "-fstrict-aliasing",
            "-Wvla",
            "-finput-charset=UTF-8",
            "-fexec-charset=UTF-8",
            "-D_FORTIFY_SOURCE=2",
            "-DFL_UNICODE_DB",
            "-c ${sbs.input_file}",
            "-o ${sbs.output_file}"
        ]
    },    

    if env(linux-bash) {
        compile: {
            flags: [ "-fPIC", "-std=gnu99", ]
        },
        archive: {
            extension: ".a",
            flags: [ "rcs", "${sbs.output_file}" ]
        },
        shared: {
            extension: ".so",
            flags: [
                "-shared",
                "-o ${sbs.output_file}"
            ]
        },
        executable: {
            extension: "",
            flags: [
                "-o ${sbs.output_file}"
            ]
        }
    },

    if env(win-cmd) {
        compile: {
            flags: [ ]
        },
        archive: {
            extension: ".lib",
            flags: [
                "/NOLOGO",
                "/OUT:${sbs.output_file}"
            ]
        },
        shared: {
            extension: ".dll",
            flags: [
                "/NOLOGO",
                "/DLL",
                "/OUT:${sbs.output_file}"
            ]
        },
        executable: {
            extension: ".exe",
            flags: [
                "/OUT:${sbs.output_file}",
                "/DEFAULTLIB:libcmt.lib",
                "/NOLOGO",
                "/SUBSYSTEM:CONSOLE"
            ]
        }
    }
}

config clang-debug extends clang-config {
    compile: {
        flags: [
            "-ggdb",
            "-O0",
            "-DFL_DEBUG"
        ]
    }
    if env(win-cmd) {
        shared: {
            flags: [
                "/DEBUG:FULL"
            ]
        },
        executable: {
            flags: [
                "/DEBUG:FULL"
            ]
        }
    }
}

config clang-release extends clang-config {
    compile: {
        flags: [
            "-ggdb",
            "-DFL_DEBUG"
            "-O3"
        ]
    }
    if env(win-cmd) {
        shared: {
            flags: [
                "/DEBUG:FULL"
            ]
        },
        executable: {
            flags: [
                "/DEBUG:FULL"
            ]
        }
    }
}

config clang-debug-sanitize extends clang-debug {
    compile: {
        flags: [
            "-fsanitize=address,undefined"
        ]
    }

    if env(linux-bash) {
        compile: {
            flags: [
                "-fsanitize=address,undefined,function",
            ]
        },
        executable: {
            flags: [
                "-fsanitize=address,undefined,function"
            ]
        }
    }
}



config clang-release-sanitize extends clang-release {
    compile: {
        flags: [
            "-fsanitize=address,undefined",
            "-O3",
        ]
    }

    if env(linux-bash) {
        compile: {
            flags: [
                "-fsanitize=address,undefined,function",
            ]
        },
        executable: {
            flags: [
                "-fsanitize=address,undefined,function"
            ]
        }
    }
}

# The MSVC configuration is valid only for the MSVC toolchain
config msvc-config for toolchain(msvc) {
    compile: {
        extension: ".o",
        flags: [ "/Zi", "/W1", "/c ${sbs.input_file}", "/Fo.\\${sbs.output_file}" ]
    },    
    archive: {
        extension: ".lib",
        flags: [ "/NOLOGO", "/OUT:${sbs.output_file}" ]
    },
    shared: {
        extension: ".dll",
        flags: [ "/NOLOGO", "/DLL", "/OUT:${sbs.output_file}" ]
    },
    executable: {
        extension: ".exe",
        flags: [ "/OUT:${sbs.output_file}", "/DEFAULTLIB:libcmt.lib", "/NOLOGO", "/SUBSYSTEM:CONSOLE" ]
    }
}

# Configurations extending from msvc-config inherit all the for clauses too, which means
# both msvc-debug and msvc-release are available just for the msvc toolchain
config msvc-debug extends msvc-config {
    compile: { flags : [  "/Od", "/DEBUG:FULL" ] }
}


config msvc-release extends msvc-config {
    compile: { flags : [ "/GL", "/Gw" ] }
}
