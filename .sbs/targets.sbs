
compile fl-objects {
    includes: [ ],
    output_dir: "obj/${sbs.env}/${sbs.arch}/${sbs.toolchain}/${sbs.config}/",
    sources: [ 
        "src/containers/[^/]*[.]c$"
        "src/os/[^W/]*[.]c$"
        "src/text/[^/]*[.]c$"
        "src/threading/[^/]*[.]c$"
        "src/[^/]*[.]c$"
    ],

    if env(win-cmd) {
        sources: [
            "src/os/WinEx.c"
        ]
    }
}

compile flut-objects {
    includes: [ 
        "./include"
    ],
    output_dir: "obj/${sbs.env}/${sbs.arch}/${sbs.toolchain}/${sbs.config}/",
    sources: [
        "flut/src/.*[.]c$"
    ]
}


compile fl-tests-objects {
    includes: [ 
        "./include"
    ],
    output_dir: "obj/${sbs.env}/${sbs.arch}/${sbs.toolchain}/${sbs.config}/",
    sources: [
        "tests/.*[.]c$"
    ]
}

archive fllib-static {
    output_name: "libfl",
    output_dir: "build/${sbs.env}/${sbs.arch}/${sbs.toolchain}/${sbs.config}/",
    actions: {
        before: [],
        after: []
    },
    objects: [
        fl-objects
    ]
}

archive flut-static {
    output_name: "libflut",
    output_dir: "build/${sbs.env}/${sbs.arch}/${sbs.toolchain}/${sbs.config}/",
    actions: {
        before: [],
        after: []
    },
    objects: [
        fl-objects,
        flut-objects
    ]
}

executable fl-tests {
    output_name: "tests",
    output_dir: "build/${sbs.env}/${sbs.arch}/${sbs.toolchain}/${sbs.config}/",
    actions: {
        before: [],
        after: []
    },
    objects: [
        fl-tests-objects,
        flut-static
    ]

    if env(linux-bash) {
        libraries: [
            { name: "m" },
            { name: "pthread" }
        ]
    }
}

executable fl-tests-sanitize {
    output_name: "tests",
    output_dir: "build/${sbs.env}/${sbs.arch}/${sbs.toolchain}/${sbs.config}/",
    actions: {
        # before: [ clean, clean-tests ]
        # after: [ `.\tests\build\clang-debug-sanitize\tests.exe` ]
    }
    if env(win-cmd) {
        libraries: [
            {
                path: "D:\dev\LLVM\x86\lib\clang\8.0.0\lib\windows"
            }
        ]
        objects: [
            "clang_rt.ubsan_standalone-i386.lib",
            "clang_rt.asan-i386.lib",
            "clang_rt.builtins-i386.lib",
        ]
    }

    if env(linux-bash) {
        libraries: [
            { name: "m" },
            { name: "pthread" }
        ]
    }

    objects: [
        fl-tests-objects,
        flut-static,
    ]
}


compile fl-unicode-db-objs {
    includes: [ "./include" ],
    output_dir: "obj/${sbs.env}/${sbs.arch}/${sbs.toolchain}/${sbs.config}/",
    sources: [ "resources/unicode/main.c" ]
}

executable fl-unicode-db {
    output_name: "unicodedb",
    output_dir: "build/${sbs.env}/${sbs.arch}/${sbs.toolchain}/${sbs.config}/",
    objects: [ fl-unicode-db-objs, fllib-static ],
    actions: {
        after: [ generate-unicode-db ]
    }
}
