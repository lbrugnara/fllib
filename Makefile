CC=gcc
AR=ar
DEBUG=-ggdb -DFL_DEBUG
override CFLAGS += -O0 -Wall -Wno-unused-variable -Wno-unused-function -std=c99 -pedantic -fstrict-aliasing 

ifneq ($(OS),Windows_NT)
override CFLAGS += -fPIC
endif

# Default TARGET is debug (debut|release)
TARGET=debug

ifeq ($(TARGET),debug)
	override CLFAGS += $(DEBUG)
endif

# Linkage
VALID_LINKAGES := static shared
LINKAGE=static
FL_STATIC_LIB=libfl.a
FL_SHARED_LIB=libfl.so

ifeq ($(OS),Windows_NT)
	override FL_SHARED_LIB=libfl.dll
endif

ifeq ($(filter $(LINKAGE), $(VALID_LINKAGES)),)
$(error $(LINKAGE) is not a valid linkage parameter. Please specify a valid one.)
endif

# Core modules
FL_OBJECTS=\
	obj/$(TARGET)/src/Std.o 						\
	obj/$(TARGET)/src/Mem.o 						\
	obj/$(TARGET)/src/Cstr.o 						\
	obj/$(TARGET)/src/Array.o 						\
	obj/$(TARGET)/src/containers/Iterator.o 		\
	obj/$(TARGET)/src/containers/Vector.o 			\
	obj/$(TARGET)/src/containers/List.o 			\
	obj/$(TARGET)/src/containers/KeyValuePair.o		\
	obj/$(TARGET)/src/containers/Dictionary.o 		\
	obj/$(TARGET)/src/text/Regex.o

# Test modules
FL_TEST_OBJECTS=\
	obj/$(TARGET)/tests/Main.o \
	obj/$(TARGET)/tests/Test.o 

ifeq ($(LINKAGE),static)
	# Creates the .a file
	COMMAND_COMPILE_FL=$(AR) rcs build/$(TARGET)/$(FL_STATIC_LIB) $(FL_OBJECTS)
	# Compiles the tests using the .a file generated by fllib target
	COMMAND_COMPILE_TEST=\
		@mkdir -p $(dir $@) && mkdir -p tests/build/$(TARGET); \
		$(CC) $(CFLAGS) $(FL_TEST_OBJECTS) -o tests/build/$(TARGET)/tests build/$(TARGET)/$(FL_STATIC_LIB)

else ifeq ($(LINKAGE),shared)
	# Creates a shared library (so or dll)
	COMMAND_COMPILE_FL=\
		$(CC) -shared $(CFLAGS) $(FL_OBJECTS) -o build/$(TARGET)/$(FL_SHARED_LIB)
	# Compiles the tests using the shared library generated by fllib target.
	# (Windows) Copy the .dll into the tests directory.
	COMMAND_COMPILE_TEST=\
		@mkdir -p $(dir $@) && mkdir -p tests/build/$(TARGET); \
		$(CC) $(CFLAGS) -L./build/$(TARGET) -lfl $(FL_TEST_OBJECTS) -o tests/build/$(TARGET)/tests; \
		cp build/$(TARGET)/$(FL_SHARED_LIB) tests/build/$(TARGET)/
endif

fllib: folders $(FL_OBJECTS)
	$(COMMAND_COMPILE_FL)

tests: fllib $(FL_TEST_OBJECTS)
	$(COMMAND_COMPILE_TEST)

obj/$(TARGET)/src/%.o: src/%.c
	@mkdir -p $(dir $@)
	$(CC) $(CFLAGS) -c $< -o $@

obj/$(TARGET)/tests/%.o: tests/%.c
	@mkdir -p $(dir $@)
	$(CC) $(CFLAGS) -c $< -o $@

.PHONY: clean folders
clean:	
	@rm -fr {obj,build}/
	@rm -fr tests/{obj,build}/

folders:
	@mkdir -p obj/$(TARGET)/src
	@mkdir -p build/$(TARGET)